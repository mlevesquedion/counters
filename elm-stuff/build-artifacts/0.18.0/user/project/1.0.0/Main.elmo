var _user$project$Main$updateTabs = F3(
	function (tabs, tabIndex, func) {
		return A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (index, tab) {
					return _elm_lang$core$Native_Utils.eq(index, tabIndex) ? _elm_lang$core$Native_Utils.update(
						tab,
						{
							count: func(tab.count)
						}) : tab;
				}),
			tabs);
	});
var _user$project$Main$model = {
	currentTab: 0,
	tabs: {ctor: '[]'},
	newLabel: '',
	mdl: _debois$elm_mdl$Material$model
};
var _user$project$Main$Tab = F2(
	function (a, b) {
		return {count: a, label: b};
	});
var _user$project$Main$Model = F4(
	function (a, b, c, d) {
		return {currentTab: a, tabs: b, newLabel: c, mdl: d};
	});
var _user$project$Main$NewTab = {ctor: 'NewTab'};
var _user$project$Main$UpdateLabel = function (a) {
	return {ctor: 'UpdateLabel', _0: a};
};
var _user$project$Main$Mdl = function (a) {
	return {ctor: 'Mdl', _0: a};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'Increment':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							tabs: A3(
								_user$project$Main$updateTabs,
								model.tabs,
								_p0._0,
								F2(
									function (x, y) {
										return x + y;
									})(1))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Decrement':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							tabs: A3(
								_user$project$Main$updateTabs,
								model.tabs,
								_p0._0,
								function (_p1) {
									return A2(
										_elm_lang$core$Basics$max,
										0,
										A3(
											_elm_lang$core$Basics$flip,
											F2(
												function (x, y) {
													return x - y;
												}),
											1,
											_p1));
								})
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Reset':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							tabs: A3(
								_user$project$Main$updateTabs,
								model.tabs,
								_p0._0,
								_elm_lang$core$Basics$always(0))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Delete':
				var _p2 = _p0._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							tabs: function () {
								var tabsAfter = A2(_elm_lang$core$List$drop, _p2, model.tabs);
								var tabsBefore = A2(_elm_lang$core$List$take, _p2, model.tabs);
								return A2(
									_elm_lang$core$Basics_ops['++'],
									tabsBefore,
									A2(_elm_lang$core$List$drop, 1, tabsAfter));
							}()
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SelectTab':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{currentTab: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'NewTab':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							tabs: A2(
								_elm_lang$core$Basics_ops['++'],
								model.tabs,
								{
									ctor: '::',
									_0: A2(_user$project$Main$Tab, 0, model.newLabel),
									_1: {ctor: '[]'}
								}),
							newLabel: ''
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdateLabel':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{newLabel: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return A3(_debois$elm_mdl$Material$update, _user$project$Main$Mdl, _p0._0, model);
		}
	});
var _user$project$Main$SelectTab = function (a) {
	return {ctor: 'SelectTab', _0: a};
};
var _user$project$Main$Delete = function (a) {
	return {ctor: 'Delete', _0: a};
};
var _user$project$Main$Reset = function (a) {
	return {ctor: 'Reset', _0: a};
};
var _user$project$Main$Decrement = function (a) {
	return {ctor: 'Decrement', _0: a};
};
var _user$project$Main$Increment = function (a) {
	return {ctor: 'Increment', _0: a};
};
var _user$project$Main$viewBody = function (model) {
	var tab = A2(
		_elm_lang$core$Array$get,
		model.currentTab,
		_elm_lang$core$Array$fromList(model.tabs));
	var rendering = function () {
		var _p3 = tab;
		if (_p3.ctor === 'Just') {
			var _p4 = _p3._0;
			return A2(
				_debois$elm_mdl$Material_Card$view,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Card$title,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_Card$head,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(
											_elm_lang$core$Basics_ops['++'],
											_p4.label,
											A2(
												_elm_lang$core$Basics_ops['++'],
												' : ',
												_elm_lang$core$Basics$toString(_p4.count)))),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Card$actions,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A5(
									_debois$elm_mdl$Material_Button$render,
									_user$project$Main$Mdl,
									{
										ctor: '::',
										_0: 0,
										_1: {
											ctor: '::',
											_0: model.currentTab,
											_1: {ctor: '[]'}
										}
									},
									model.mdl,
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Button$icon,
										_1: {
											ctor: '::',
											_0: _debois$elm_mdl$Material_Button$colored,
											_1: {
												ctor: '::',
												_0: _debois$elm_mdl$Material_Button$ripple,
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Options$onClick(
														_user$project$Main$Increment(model.currentTab)),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Icon$i('add'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A5(
										_debois$elm_mdl$Material_Button$render,
										_user$project$Main$Mdl,
										{
											ctor: '::',
											_0: 2,
											_1: {
												ctor: '::',
												_0: model.currentTab,
												_1: {ctor: '[]'}
											}
										},
										model.mdl,
										{
											ctor: '::',
											_0: _debois$elm_mdl$Material_Button$icon,
											_1: {
												ctor: '::',
												_0: _debois$elm_mdl$Material_Button$colored,
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Button$ripple,
													_1: {
														ctor: '::',
														_0: _debois$elm_mdl$Material_Options$onClick(
															_user$project$Main$Decrement(model.currentTab)),
														_1: {ctor: '[]'}
													}
												}
											}
										},
										{
											ctor: '::',
											_0: _debois$elm_mdl$Material_Icon$i('remove'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A5(
											_debois$elm_mdl$Material_Button$render,
											_user$project$Main$Mdl,
											{
												ctor: '::',
												_0: 3,
												_1: {
													ctor: '::',
													_0: model.currentTab,
													_1: {ctor: '[]'}
												}
											},
											model.mdl,
											{
												ctor: '::',
												_0: _debois$elm_mdl$Material_Button$icon,
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Button$colored,
													_1: {
														ctor: '::',
														_0: _debois$elm_mdl$Material_Button$ripple,
														_1: {
															ctor: '::',
															_0: _debois$elm_mdl$Material_Options$onClick(
																_user$project$Main$Reset(model.currentTab)),
															_1: {ctor: '[]'}
														}
													}
												}
											},
											{
												ctor: '::',
												_0: _debois$elm_mdl$Material_Icon$i('exposure_zero'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A5(
												_debois$elm_mdl$Material_Button$render,
												_user$project$Main$Mdl,
												{
													ctor: '::',
													_0: 4,
													_1: {
														ctor: '::',
														_0: model.currentTab,
														_1: {ctor: '[]'}
													}
												},
												model.mdl,
												{
													ctor: '::',
													_0: _debois$elm_mdl$Material_Button$icon,
													_1: {
														ctor: '::',
														_0: _debois$elm_mdl$Material_Button$colored,
														_1: {
															ctor: '::',
															_0: _debois$elm_mdl$Material_Options$onClick(
																_user$project$Main$Delete(model.currentTab)),
															_1: {ctor: '[]'}
														}
													}
												},
												{
													ctor: '::',
													_0: _debois$elm_mdl$Material_Icon$i('delete'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					}
				});
		} else {
			return A2(
				_debois$elm_mdl$Material_Card$view,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Card$title,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_Card$head,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('What do you want to count?'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Card$actions,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A5(
									_debois$elm_mdl$Material_Textfield$render,
									_user$project$Main$Mdl,
									{
										ctor: '::',
										_0: 2,
										_1: {ctor: '[]'}
									},
									model.mdl,
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Textfield$floatingLabel,
										_1: {
											ctor: '::',
											_0: _debois$elm_mdl$Material_Textfield$label('I want to count...'),
											_1: {
												ctor: '::',
												_0: _debois$elm_mdl$Material_Textfield$value(model.newLabel),
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Options$onInput(_user$project$Main$UpdateLabel),
													_1: {
														ctor: '::',
														_0: _debois$elm_mdl$Material_Options$attribute(
															_elm_lang$html$Html_Attributes$autofocus(true)),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A5(
										_debois$elm_mdl$Material_Button$render,
										_user$project$Main$Mdl,
										{
											ctor: '::',
											_0: 3,
											_1: {ctor: '[]'}
										},
										model.mdl,
										{
											ctor: '::',
											_0: _debois$elm_mdl$Material_Button$icon,
											_1: {
												ctor: '::',
												_0: _debois$elm_mdl$Material_Button$colored,
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Options$onClick(_user$project$Main$NewTab),
													_1: {ctor: '[]'}
												}
											}
										},
										{
											ctor: '::',
											_0: _debois$elm_mdl$Material_Icon$i('add_circle'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}
				});
		}
	}();
	return A3(_debois$elm_mdl$Material_Scheme$topWithScheme, _debois$elm_mdl$Material_Color$Teal, _debois$elm_mdl$Material_Color$LightGreen, rendering);
};
var _user$project$Main$view = function (model) {
	return A4(
		_debois$elm_mdl$Material_Layout$render,
		_user$project$Main$Mdl,
		model.mdl,
		{
			ctor: '::',
			_0: _debois$elm_mdl$Material_Layout$fixedHeader,
			_1: {
				ctor: '::',
				_0: _debois$elm_mdl$Material_Layout$fixedDrawer,
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Layout$fixedTabs,
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Layout$onSelectTab(_user$project$Main$SelectTab),
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Layout$selectedTab(model.currentTab),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		},
		{
			header: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h1,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'padding', _1: '2rem'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Counters'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			drawer: {ctor: '[]'},
			tabs: {
				ctor: '_Tuple2',
				_0: A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$List$map,
						function (_p5) {
							return _elm_lang$html$Html$text(
								function (_) {
									return _.label;
								}(_p5));
						},
						model.tabs),
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('New counter'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Color$background(
						A2(_debois$elm_mdl$Material_Color$color, _debois$elm_mdl$Material_Color$Teal, _debois$elm_mdl$Material_Color$S400)),
					_1: {ctor: '[]'}
				}
			},
			main: {
				ctor: '::',
				_0: _user$project$Main$viewBody(model),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{
		init: {ctor: '_Tuple2', _0: _user$project$Main$model, _1: _elm_lang$core$Platform_Cmd$none},
		view: _user$project$Main$view,
		subscriptions: _elm_lang$core$Basics$always(_elm_lang$core$Platform_Sub$none),
		update: _user$project$Main$update
	})();
